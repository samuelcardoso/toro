plugins:
  - serverless-plugin-typescript
  - serverless-offline

service: toro-backend

custom:
  stage: ${opt:stage, 'dev'}
  
provider:
  name: aws
  region: us-east-1
  runtime: nodejs10.x
  stage: ${self:custom.stage}
  environment:
    TOKEN_SECRET: ${file(./serverless.env.yml):${self:custom.stage}.TOKEN_SECRET}
    DATABASE_CONNECTION: ${file(./serverless.env.yml):${self:custom.stage}.DATABASE_CONNECTION}
    DROP_SCHEMA: ${file(./serverless.env.yml):${self:custom.stage}.DROP_SCHEMA}

functions:
  # Users
  userAll:
    handler: src/lambda/user.all
    events:
      - http:
          path: /users/all
          method: GET
          cors: true
  userGet:
    handler: src/lambda/user.get
    events:
      - http:
          path: /users/{id}
          method: GET
          cors: true
  userCreate:
    handler: src/lambda/user.create
    events:
      - http:
          path: /users
          method: POST
          cors: true
  # Accounts
  stockAll:
    handler: src/lambda/stock.all
    events:
      - http:
          path: /stocks/all
          method: GET
          cors: true
  # Accounts
  accountAll:
    handler: src/lambda/account.all
    events:
      - http:
          path: /accounts/all
          method: GET
          cors: true
  accountGet:
    handler: src/lambda/account.get
    events:
      - http:
          path: /accounts/{id}
          method: GET
          cors: true
  accountUpdateBalance:
    handler: src/lambda/account.updateBalance
    events:
      - http:
          path: /accounts/{id}
          method: PUT
          cors: true
  accountBuyStock:
    handler: src/lambda/account.buyStock
    events:
      - http:
          path: /accounts/{id}/buystock
          method: PUT
          cors: true
  accountSellStock:
    handler: src/lambda/account.sellStock
    events:
      - http:
          path: /accounts/{id}/sellstock
          method: PUT
          cors: true